package pl.com.it_crowd.htmlunit_designer;

import com.gargoylesoftware.htmlunit.Page;
import com.gargoylesoftware.htmlunit.SgmlPage;
import com.gargoylesoftware.htmlunit.WebWindow;
import com.gargoylesoftware.htmlunit.WebWindowAdapter;
import com.gargoylesoftware.htmlunit.WebWindowEvent;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class PageSourceForm {
// ------------------------------ FIELDS ------------------------------

    private AppModel appModel;

    private JTextArea pageSourceTextArea;

    private JPanel rootComponent;

    private JButton searchButton;

    private JPanel searchPanel;

    private JTextField searchTextField;

// --------------------------- CONSTRUCTORS ---------------------------

    public PageSourceForm(AppModel appModel)
    {
        this.appModel = appModel;
        setupWebClientWindowListener();
        setupActionListeners();
        setupShortcutListeners();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

// -------------------------- OTHER METHODS --------------------------

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return rootComponent;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        rootComponent = new JPanel();
        rootComponent.setLayout(new BorderLayout(0, 0));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootComponent.add(scrollPane1, BorderLayout.CENTER);
        pageSourceTextArea = new JTextArea();
        pageSourceTextArea.setEditable(false);
        scrollPane1.setViewportView(pageSourceTextArea);
        searchPanel = new JPanel();
        searchPanel.setLayout(new BorderLayout(0, 0));
        rootComponent.add(searchPanel, BorderLayout.NORTH);
        searchTextField = new JTextField();
        searchPanel.add(searchTextField, BorderLayout.CENTER);
        searchButton = new JButton();
        searchButton.setText("Search");
        searchPanel.add(searchButton, BorderLayout.EAST);
    }

    private void search()
    {
        final Highlighter highlighter = pageSourceTextArea.getHighlighter();
        highlighter.removeAllHighlights();
        final String text = pageSourceTextArea.getText().toLowerCase();
        final String searchText = searchTextField.getText().toLowerCase();
        final int searchTextLength = searchText.length();
        int start = 0;
        do {
            start = text.indexOf(searchText, start);
            if (start == -1) {
                break;
            }
            try {
                highlighter.addHighlight(start, start + searchTextLength, DefaultHighlighter.DefaultPainter);
            } catch (BadLocationException ble) {
            }
            start += searchTextLength;
        } while (start < text.length());
    }

    private void setupActionListeners()
    {
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
                search();
            }
        });
    }

    private void setupShortcutListeners()
    {
        searchTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e)
            {
                if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                    search();
                    e.consume();
                }
            }
        });
    }

    private void setupWebClientWindowListener()
    {
        appModel.getWebClient().addWebWindowListener(new WebWindowAdapter() {
            @Override
            public void webWindowContentChanged(WebWindowEvent event)
            {
                Page page = event.getNewPage();
                WebWindow currentWindow = event.getWebWindow().getWebClient().getCurrentWindow();
                if (currentWindow != null && !currentWindow.equals(event.getWebWindow())) {
                    return;
                }
                if (page instanceof SgmlPage) {
                    pageSourceTextArea.setText(((SgmlPage) page).asXml());
                } else {
                    System.out.println(page);
                }
            }
        });
    }
}
