package pl.com.it_crowd.htmlunit_designer;

import bsh.EvalError;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EditorForm {
// ------------------------------ FIELDS ------------------------------

    private AppModel appModel;

    private JTextArea editorTextArea;

    private JPanel rootComponent;

// --------------------------- CONSTRUCTORS ---------------------------

    public EditorForm(AppModel appModel)
    {
        this.appModel = appModel;
        setupEditorTextArea();
        setupModelListener();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

// -------------------------- OTHER METHODS --------------------------

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return rootComponent;
    }

    public void toggleComment()
    {
        int start = editorTextArea.getSelectionStart();
        int end = editorTextArea.getSelectionEnd();
        String line;
        int pos = 0;
        StringBuilder builder = new StringBuilder();
        StringTokenizer stringTokenizer = new StringTokenizer(editorTextArea.getText(), "\n");
        java.util.List<String> lines = new ArrayList<String>();
        int index = 0;
        int startLine = -1;
        int endLine = -1;
        boolean comment = false;
        while (stringTokenizer.hasMoreElements()) {
            line = stringTokenizer.nextToken();
            lines.add(line);
            if (pos >= start && pos <= end || pos < start && start <= pos + line.length()) {
                if (startLine == -1) {
                    startLine = index;
                } else {
                    endLine = index;
                }
                if (!line.matches("^\\s*//.*")) {
                    comment = true;
                }
            }
            index++;
            pos += line.length() + 1;
        }
        endLine = Math.max(startLine, endLine);
        Pattern pattern = Pattern.compile("^\\s*//(.*)");
        for (int i = 0, linesSize = lines.size(); i < linesSize; i++) {
            line = lines.get(i);
            if (startLine <= i && i <= endLine) {
                if (comment) {
                    builder.append("//").append(line);
                } else {
                    Matcher matcher = pattern.matcher(line);
                    if (matcher.find()) {
                        builder.append(matcher.group(1));
                    } else {
                        builder.append(line);
                    }
                }
            } else {
                builder.append(line);
            }
            builder.append("\n");
        }
        editorTextArea.setText(builder.toString());
        editorTextArea.setSelectionStart(start + (comment ? +2 : -2));
        editorTextArea.setSelectionEnd(end + (comment ? +2 * (endLine - startLine + 1) : -2 * (endLine - startLine + 1)));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        rootComponent = new JPanel();
        rootComponent.setLayout(new BorderLayout(0, 0));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootComponent.add(scrollPane1, BorderLayout.CENTER);
        editorTextArea = new JTextArea();
        editorTextArea.setText("/** F5 or CTRL+ENTER to execute */  ");
        scrollPane1.setViewportView(editorTextArea);
    }

    private void setupEditorTextArea()
    {
        editorTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e)
            {
                boolean controlPressed = (e.getModifiersEx() & KeyEvent.CTRL_DOWN_MASK) == KeyEvent.CTRL_DOWN_MASK;
                if (KeyUtils.isEvaluateCombination(e)) {
                    try {
                        appModel.getInterpreter().eval(editorTextArea.getText());
                    } catch (EvalError evalError) {
                        appModel.getInterpreter().error(evalError);
                        appModel.getInterpreter().println("");
//                        consoleForm.getJConsole().error(evalError);
//                        consoleForm.getJConsole().println();
                    }
                } else if (controlPressed && KeyEvent.VK_SLASH == e.getKeyCode()) {
                    toggleComment();
                }
            }
        });
        editorTextArea.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e)
            {
                appModel.setEditorTextModified(true);
                appModel.setEditorText(editorTextArea.getText());
            }

            public void removeUpdate(DocumentEvent e)
            {
                appModel.setEditorTextModified(true);
                appModel.setEditorText(editorTextArea.getText());
            }

            public void changedUpdate(DocumentEvent e)
            {
                appModel.setEditorTextModified(true);
                appModel.setEditorText(editorTextArea.getText());
            }
        });
    }

    private void setupModelListener()
    {
        appModel.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt)
            {
                if (AppModel.editorTextProperty.equals(evt.getPropertyName())) {
                    try {
                        editorTextArea.setText((String) evt.getNewValue());
                    } catch (IllegalStateException ex) {
// This exception may be thrown when we modify textarea, then appModel is notified and then this lister is executed,
// so a infinite loop is triggered
                    }
                }
            }
        });
    }
}
